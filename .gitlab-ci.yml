variables:
  GRAFANA_VERSION: "11.4"
  DATE_SUFFIX: ${CI_PIPELINE_CREATED_AT}
  GRAFANA_API_URL: "https://grafana.com/api/plugins"

stages:
  - discover
  - download
  - calculate_size
  - commit

discover_plugins:
  stage: discover
  image: python:3.11-slim
  script:
    - apt-get update && apt-get install -y curl jq
    - |
      # Get plugins and filter for those that have Linux AMD64 support
      curl -s "$GRAFANA_API_URL" |jq -r '.items[]? | select (.packages[]?.packageName == "linux-amd64") | .slug' > plugins-linux-amd64.txt
      curl -s "$GRAFANA_API_URL" |jq -r '.items[]? | select (.packages[]?.packageName == "any") | .slug' > plugins-any.txt
    - |
      echo "Found $(wc -l < plugins.txt) Linux AMD64 compatible plugins"
  artifacts:
    paths:
      - plugins-linux-amd64.txt
      - plugins-any.txt
    expire_in: 1 day

download_plugins:
  stage: download
  image: python:3.11-slim
  script:
    - apt-get update && apt-get install -y curl zip jq
    - |
      # Format date as YYYY-MM-DD
      FORMATTED_DATE=$(date +%Y-%m-%d)
      PLUGINS_DIR="grafana-plugins-${FORMATTED_DATE}"
      echo "Creating directory: $PLUGINS_DIR"
      mkdir -p $PLUGINS_DIR
    - |
      for plugin in $(cat plugins-linux-amd64.txt)
      do
        echo "Downloading plugin: $plugin"
        version_info=$(curl -s "$GRAFANA_API_URL/$plugin" | jq -r '.items[]? | select (.packages[]?.packageName == "linux-amd64" or .packages[]?.packageName == "any")  | .version')

        # if [ ! -z "$version_info" ]; then
          version=$(echo "$version_info" | jq -r '.version')
          # curl -L -o "$PLUGINS_DIR/$plugin.zip" "$download_url" || echo "Failed to download $plugin"
        # else
        #   echo "Skipping $plugin - No version available"
        # fi
      done
        # curl -L -o "$PLUGINS_DIR/$plugin.zip" "$download_url" || echo "Failed to download $plugin"        
        # Get the latest version info for Linux AMD64
        
        # if [ ! -z "$version_info" ]; then
          # version=$(echo "$version_info" | jq -r '.version')
          # echo "Latest Linux AMD64 version: $version"
          # download_url="$GRAFANA_API_URL/$plugin/versions/$version/download?os=linux&arch=amd64"
          # echo "#Download Url: {download_url}"
          # curl -L -o "$PLUGINS_DIR/$plugin.zip" "$download_url" || echo "Failed to download $plugin"
        # else
          # echo "Skipping $plugin - No Linux AMD64 version available"
        # fi
      # done < plugins.txt
    - echo "PLUGINS_DIR=$PLUGINS_DIR" >> variables.env
  artifacts:
    paths:
      - grafana-plugins-*
      - variables.env
    expire_in: 1 day
  needs:
    - discover_plugins

calculate_size:
  stage: calculate_size
  image: alpine:latest
  script:
    - source variables.env
    - |
      echo "Calculating total size of downloaded plugins..."
      total_size_bytes=$(du -sb $PLUGINS_DIR | cut -f1)
      total_size_mb=$(echo "scale=2; $total_size_bytes/1024/1024" | bc)
      echo "Total size of all Linux AMD64 plugins: ${total_size_mb}MB (${total_size_bytes} bytes)"
      echo "$total_size_bytes" > total_size.txt
      echo "Size breakdown by plugin:"
      cd $PLUGINS_DIR
      for plugin in *.zip; do
        if [ -f "$plugin" ]; then
          size=$(du -sh "$plugin" | cut -f1)
          echo "- $plugin: $size"
        fi
      done
  artifacts:
    paths:
      - grafana-plugins-*
      - total_size.txt
      - variables.env
    reports:
      metrics: total_size.txt
    expire_in: 1 day
  needs:
    - download_plugins

commit_plugins:
  stage: commit
  image: alpine:latest
  before_script:
    - apk add --no-cache git
    - git config --global user.email "tomer1983@gmail.com"
    - git config --global user.name "tomer1983"
  script:
    - source variables.env
    - |
      if [ -n "$(git status --porcelain)" ]; then
        total_size_mb=$(cat total_size.txt | awk '{printf "%.2f", $1/1024/1024}')
        git add .
        git commit -m "Update Grafana plugins (${PLUGINS_DIR}) - Linux AMD64 only - Total size: ${total_size_mb}MB [skip ci]"
        # git push origin HEAD:$CI_COMMIT_REF_NAME
        git push https://oauth2:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$CI_COMMIT_REF_NAME
      else
        echo "No changes to commit"
      fi
  needs:
    - calculate_size