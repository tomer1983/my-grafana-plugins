variables:
  GRAFANA_VERSION: "11.4"
  DATE_SUFFIX: ${CI_PIPELINE_CREATED_AT}
  GRAFANA_API_URL: "https://grafana.com/api/plugins"

stages:
  - discover
  - download
  - commit

discover_plugins:
  stage: discover
  image: python:3.11-slim
  script:
    - apt-get update && apt-get install -y curl jq
    - |
      # Get plugins and filter for those that have Linux AMD64 support
      curl -s "$GRAFANA_API_URL" |jq -r '.items[]? | select (.packages[]?.packageName == "linux-amd64" or .packages[]?.packageName == "any") | .slug' > plugins.txt
    - |
      echo "Found $(wc -l < plugins.txt) plugins"
  artifacts:
    paths:
      - plugins.txt
    expire_in: 1 day

download_plugins:
  stage: download
  image: python:3.11-slim
  script:
    - apt-get update && apt-get install -y curl zip jq
    - |
      # Format date as YYYY-MM-DD
      FORMATTED_DATE=$(date +%Y-%m-%d)
      PLUGINS_DIR="grafana-plugins-${FORMATTED_DATE}"
      echo "Creating directory: $PLUGINS_DIR"
      mkdir -p $PLUGINS_DIR
    - |
      for plugin in $(cat plugins.txt)
      do
        get_plugin_info=$(curl -s "$GRAFANA_API_URL/$plugin")
        get_arc_info=$(echo $get_plugin_info | jq  'if .packages[].packageName == "any" then "any" else "linux-amd64" end')
        get_version_info=$(echo $get_plugin_info | jq -r '.version')

        echo "running $GRAFANA_API_URL/$plugin/versions/$get_version_info/download"
        
        
        case "$get_arc_info" in
          any)
            echo "plugin $plugin  arc is $get_arc_info"
            download_url="$GRAFANA_API_URL/$plugin/versions/$get_version_info/download";;
          linux-amd64)
            echo "plugin $plugin  arc is $get_arc_info"
            download_url="$GRAFANA_API_URL/$plugin/versions/$get_version_info/download?os=linux&arch=amd64";;
          *)
            echo "error: could not find arc ($arc)for $plugin"
            break
        esac
        
        echo "running command : curl -L -o $PLUGINS_DIR/$plugin.zip $download_url"
        curl -L -o "$PLUGINS_DIR/$plugin.zip" "$download_url" || echo "Failed to download $plugin"
        
      done < plugins.txt
    - echo "PLUGINS_DIR=$PLUGINS_DIR" >> variables.env
  artifacts:
    paths:
      - $PLUGINS_DIR
      # - grafana-plugins-*
      - variables.env
    expire_in: 1 day
  needs:
    - discover_plugins


commit_plugins:
  stage: commit
  image: alpine:latest
  before_script:
    - apk add --no-cache git
    - git config --global user.email "tomer1983@gmail.com"
    - git config --global user.name "tomer1983"
  script:
    - source variables.env
    - |
      if [ -n "$(git status --porcelain)" ]; then
        total_size_mb=$(cat total_size.txt | awk '{printf "%.2f", $1/1024/1024}')
        git add .
        git commit -m "Update Grafana plugins (${PLUGINS_DIR}) - Linux AMD64 only - Total size: ${total_size_mb}MB [skip ci]"
        # git push origin HEAD:$CI_COMMIT_REF_NAME
        git push https://oauth2:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$CI_COMMIT_REF_NAME
      else
        echo "No changes to commit"
      fi
  # needs:
  #   - calculate_size